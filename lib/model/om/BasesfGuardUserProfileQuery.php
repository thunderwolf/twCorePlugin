<?php


/**
 * Base class that represents a query for the 'sf_guard_user_profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.1 on:
 *
 * Thu Jun  3 16:43:42 2010
 *
 * @method     sfGuardUserProfileQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method     sfGuardUserProfileQuery orderByAssetId($order = Criteria::ASC) Order by the asset_id column
 * @method     sfGuardUserProfileQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     sfGuardUserProfileQuery orderByFirstName($order = Criteria::ASC) Order by the first_name column
 * @method     sfGuardUserProfileQuery orderByLastName($order = Criteria::ASC) Order by the last_name column
 * @method     sfGuardUserProfileQuery orderByBirthday($order = Criteria::ASC) Order by the birthday column
 * @method     sfGuardUserProfileQuery orderByAlias($order = Criteria::ASC) Order by the alias column
 * @method     sfGuardUserProfileQuery orderByCulture($order = Criteria::ASC) Order by the culture column
 *
 * @method     sfGuardUserProfileQuery groupByUserId() Group by the user_id column
 * @method     sfGuardUserProfileQuery groupByAssetId() Group by the asset_id column
 * @method     sfGuardUserProfileQuery groupByEmail() Group by the email column
 * @method     sfGuardUserProfileQuery groupByFirstName() Group by the first_name column
 * @method     sfGuardUserProfileQuery groupByLastName() Group by the last_name column
 * @method     sfGuardUserProfileQuery groupByBirthday() Group by the birthday column
 * @method     sfGuardUserProfileQuery groupByAlias() Group by the alias column
 * @method     sfGuardUserProfileQuery groupByCulture() Group by the culture column
 *
 * @method     sfGuardUserProfileQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     sfGuardUserProfileQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     sfGuardUserProfileQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     sfGuardUserProfileQuery leftJoinsfGuardUser($relationAlias = '') Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method     sfGuardUserProfileQuery rightJoinsfGuardUser($relationAlias = '') Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method     sfGuardUserProfileQuery innerJoinsfGuardUser($relationAlias = '') Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method     sfGuardUserProfileQuery leftJointwAsset($relationAlias = '') Adds a LEFT JOIN clause to the query using the twAsset relation
 * @method     sfGuardUserProfileQuery rightJointwAsset($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twAsset relation
 * @method     sfGuardUserProfileQuery innerJointwAsset($relationAlias = '') Adds a INNER JOIN clause to the query using the twAsset relation
 *
 * @method     sfGuardUserProfile findOne(PropelPDO $con = null) Return the first sfGuardUserProfile matching the query
 * @method     sfGuardUserProfile findOneByUserId(int $user_id) Return the first sfGuardUserProfile filtered by the user_id column
 * @method     sfGuardUserProfile findOneByAssetId(int $asset_id) Return the first sfGuardUserProfile filtered by the asset_id column
 * @method     sfGuardUserProfile findOneByEmail(string $email) Return the first sfGuardUserProfile filtered by the email column
 * @method     sfGuardUserProfile findOneByFirstName(string $first_name) Return the first sfGuardUserProfile filtered by the first_name column
 * @method     sfGuardUserProfile findOneByLastName(string $last_name) Return the first sfGuardUserProfile filtered by the last_name column
 * @method     sfGuardUserProfile findOneByBirthday(string $birthday) Return the first sfGuardUserProfile filtered by the birthday column
 * @method     sfGuardUserProfile findOneByAlias(string $alias) Return the first sfGuardUserProfile filtered by the alias column
 * @method     sfGuardUserProfile findOneByCulture(string $culture) Return the first sfGuardUserProfile filtered by the culture column
 *
 * @method     array findByUserId(int $user_id) Return sfGuardUserProfile objects filtered by the user_id column
 * @method     array findByAssetId(int $asset_id) Return sfGuardUserProfile objects filtered by the asset_id column
 * @method     array findByEmail(string $email) Return sfGuardUserProfile objects filtered by the email column
 * @method     array findByFirstName(string $first_name) Return sfGuardUserProfile objects filtered by the first_name column
 * @method     array findByLastName(string $last_name) Return sfGuardUserProfile objects filtered by the last_name column
 * @method     array findByBirthday(string $birthday) Return sfGuardUserProfile objects filtered by the birthday column
 * @method     array findByAlias(string $alias) Return sfGuardUserProfile objects filtered by the alias column
 * @method     array findByCulture(string $culture) Return sfGuardUserProfile objects filtered by the culture column
 *
 * @package    propel.generator.plugins.twCorePlugin.lib.model.om
 */
abstract class BasesfGuardUserProfileQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasesfGuardUserProfileQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'sfGuardUserProfile', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new sfGuardUserProfileQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    sfGuardUserProfileQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof sfGuardUserProfileQuery) {
			return $criteria;
		}
		$query = new sfGuardUserProfileQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    sfGuardUserProfile|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = sfGuardUserProfilePeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the user_id column
	 * 
	 * @param     int|array $userId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByUserId($userId = null, $comparison = null)
	{
		if (is_array($userId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $userId, $comparison);
	}

	/**
	 * Filter the query on the asset_id column
	 * 
	 * @param     int|array $assetId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByAssetId($assetId = null, $comparison = null)
	{
		if (is_array($assetId)) {
			$useMinMax = false;
			if (isset($assetId['min'])) {
				$this->addUsingAlias(sfGuardUserProfilePeer::ASSET_ID, $assetId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($assetId['max'])) {
				$this->addUsingAlias(sfGuardUserProfilePeer::ASSET_ID, $assetId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::ASSET_ID, $assetId, $comparison);
	}

	/**
	 * Filter the query on the email column
	 * 
	 * @param     string $email The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (is_array($email)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $email)) {
			$email = str_replace('*', '%', $email);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the first_name column
	 * 
	 * @param     string $firstName The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByFirstName($firstName = null, $comparison = null)
	{
		if (is_array($firstName)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $firstName)) {
			$firstName = str_replace('*', '%', $firstName);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::FIRST_NAME, $firstName, $comparison);
	}

	/**
	 * Filter the query on the last_name column
	 * 
	 * @param     string $lastName The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByLastName($lastName = null, $comparison = null)
	{
		if (is_array($lastName)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $lastName)) {
			$lastName = str_replace('*', '%', $lastName);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::LAST_NAME, $lastName, $comparison);
	}

	/**
	 * Filter the query on the birthday column
	 * 
	 * @param     string|array $birthday The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByBirthday($birthday = null, $comparison = null)
	{
		if (is_array($birthday)) {
			$useMinMax = false;
			if (isset($birthday['min'])) {
				$this->addUsingAlias(sfGuardUserProfilePeer::BIRTHDAY, $birthday['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($birthday['max'])) {
				$this->addUsingAlias(sfGuardUserProfilePeer::BIRTHDAY, $birthday['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::BIRTHDAY, $birthday, $comparison);
	}

	/**
	 * Filter the query on the alias column
	 * 
	 * @param     string $alias The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByAlias($alias = null, $comparison = null)
	{
		if (is_array($alias)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $alias)) {
			$alias = str_replace('*', '%', $alias);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::ALIAS, $alias, $comparison);
	}

	/**
	 * Filter the query on the culture column
	 * 
	 * @param     string $culture The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterByCulture($culture = null, $comparison = null)
	{
		if (is_array($culture)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $culture)) {
			$culture = str_replace('*', '%', $culture);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfGuardUserProfilePeer::CULTURE, $culture, $comparison);
	}

	/**
	 * Filter the query by a related sfGuardUser object
	 *
	 * @param     sfGuardUser $sfGuardUser  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterBysfGuardUser($sfGuardUser, $comparison = null)
	{
		return $this
			->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $sfGuardUser->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the sfGuardUser relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function joinsfGuardUser($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('sfGuardUser');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'sfGuardUser');
		}
		
		return $this;
	}

	/**
	 * Use the sfGuardUser relation sfGuardUser object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfGuardUserQuery A secondary query class using the current class as primary query
	 */
	public function usesfGuardUserQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinsfGuardUser($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
	}

	/**
	 * Filter the query by a related twAsset object
	 *
	 * @param     twAsset $twAsset  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function filterBytwAsset($twAsset, $comparison = null)
	{
		return $this
			->addUsingAlias(sfGuardUserProfilePeer::ASSET_ID, $twAsset->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twAsset relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function jointwAsset($relationAlias = '', $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twAsset');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twAsset');
		}
		
		return $this;
	}

	/**
	 * Use the twAsset relation twAsset object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twAssetQuery A secondary query class using the current class as primary query
	 */
	public function usetwAssetQuery($relationAlias = '', $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->jointwAsset($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twAsset', 'twAssetQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     sfGuardUserProfile $sfGuardUserProfile Object to remove from the list of results
	 *
	 * @return    sfGuardUserProfileQuery The current query, for fluid interface
	 */
	public function prune($sfGuardUserProfile = null)
	{
		if ($sfGuardUserProfile) {
			$this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $sfGuardUserProfile->getUserId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasesfGuardUserProfileQuery
