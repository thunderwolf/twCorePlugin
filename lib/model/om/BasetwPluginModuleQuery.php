<?php


/**
 * Base class that represents a query for the 'tw_plugin_module' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.1 on:
 *
 * Fri Jun  4 01:21:49 2010
 *
 * @method     twPluginModuleQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     twPluginModuleQuery orderByPluginId($order = Criteria::ASC) Order by the plugin_id column
 * @method     twPluginModuleQuery orderByStatusId($order = Criteria::ASC) Order by the status_id column
 * @method     twPluginModuleQuery orderByRoute($order = Criteria::ASC) Order by the route column
 * @method     twPluginModuleQuery orderByCredentials($order = Criteria::ASC) Order by the credentials column
 * @method     twPluginModuleQuery orderByCode($order = Criteria::ASC) Order by the code column
 * @method     twPluginModuleQuery orderByPos($order = Criteria::ASC) Order by the pos column
 *
 * @method     twPluginModuleQuery groupById() Group by the id column
 * @method     twPluginModuleQuery groupByPluginId() Group by the plugin_id column
 * @method     twPluginModuleQuery groupByStatusId() Group by the status_id column
 * @method     twPluginModuleQuery groupByRoute() Group by the route column
 * @method     twPluginModuleQuery groupByCredentials() Group by the credentials column
 * @method     twPluginModuleQuery groupByCode() Group by the code column
 * @method     twPluginModuleQuery groupByPos() Group by the pos column
 *
 * @method     twPluginModuleQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     twPluginModuleQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     twPluginModuleQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     twPluginModuleQuery leftJointwPlugin($relationAlias = '') Adds a LEFT JOIN clause to the query using the twPlugin relation
 * @method     twPluginModuleQuery rightJointwPlugin($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twPlugin relation
 * @method     twPluginModuleQuery innerJointwPlugin($relationAlias = '') Adds a INNER JOIN clause to the query using the twPlugin relation
 *
 * @method     twPluginModuleQuery leftJointwPluginStatus($relationAlias = '') Adds a LEFT JOIN clause to the query using the twPluginStatus relation
 * @method     twPluginModuleQuery rightJointwPluginStatus($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twPluginStatus relation
 * @method     twPluginModuleQuery innerJointwPluginStatus($relationAlias = '') Adds a INNER JOIN clause to the query using the twPluginStatus relation
 *
 * @method     twPluginModuleQuery leftJointwPluginModuleI18n($relationAlias = '') Adds a LEFT JOIN clause to the query using the twPluginModuleI18n relation
 * @method     twPluginModuleQuery rightJointwPluginModuleI18n($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twPluginModuleI18n relation
 * @method     twPluginModuleQuery innerJointwPluginModuleI18n($relationAlias = '') Adds a INNER JOIN clause to the query using the twPluginModuleI18n relation
 *
 * @method     twPluginModule findOne(PropelPDO $con = null) Return the first twPluginModule matching the query
 * @method     twPluginModule findOneById(int $id) Return the first twPluginModule filtered by the id column
 * @method     twPluginModule findOneByPluginId(int $plugin_id) Return the first twPluginModule filtered by the plugin_id column
 * @method     twPluginModule findOneByStatusId(int $status_id) Return the first twPluginModule filtered by the status_id column
 * @method     twPluginModule findOneByRoute(string $route) Return the first twPluginModule filtered by the route column
 * @method     twPluginModule findOneByCredentials(string $credentials) Return the first twPluginModule filtered by the credentials column
 * @method     twPluginModule findOneByCode(string $code) Return the first twPluginModule filtered by the code column
 * @method     twPluginModule findOneByPos(int $pos) Return the first twPluginModule filtered by the pos column
 *
 * @method     array findById(int $id) Return twPluginModule objects filtered by the id column
 * @method     array findByPluginId(int $plugin_id) Return twPluginModule objects filtered by the plugin_id column
 * @method     array findByStatusId(int $status_id) Return twPluginModule objects filtered by the status_id column
 * @method     array findByRoute(string $route) Return twPluginModule objects filtered by the route column
 * @method     array findByCredentials(string $credentials) Return twPluginModule objects filtered by the credentials column
 * @method     array findByCode(string $code) Return twPluginModule objects filtered by the code column
 * @method     array findByPos(int $pos) Return twPluginModule objects filtered by the pos column
 *
 * @package    propel.generator.plugins.twCorePlugin.lib.model.om
 */
abstract class BasetwPluginModuleQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasetwPluginModuleQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'twPluginModule', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new twPluginModuleQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    twPluginModuleQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof twPluginModuleQuery) {
			return $criteria;
		}
		$query = new twPluginModuleQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    twPluginModule|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = twPluginModulePeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(twPluginModulePeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(twPluginModulePeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(twPluginModulePeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the plugin_id column
	 * 
	 * @param     int|array $pluginId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByPluginId($pluginId = null, $comparison = null)
	{
		if (is_array($pluginId)) {
			$useMinMax = false;
			if (isset($pluginId['min'])) {
				$this->addUsingAlias(twPluginModulePeer::PLUGIN_ID, $pluginId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($pluginId['max'])) {
				$this->addUsingAlias(twPluginModulePeer::PLUGIN_ID, $pluginId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(twPluginModulePeer::PLUGIN_ID, $pluginId, $comparison);
	}

	/**
	 * Filter the query on the status_id column
	 * 
	 * @param     int|array $statusId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByStatusId($statusId = null, $comparison = null)
	{
		if (is_array($statusId)) {
			$useMinMax = false;
			if (isset($statusId['min'])) {
				$this->addUsingAlias(twPluginModulePeer::STATUS_ID, $statusId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($statusId['max'])) {
				$this->addUsingAlias(twPluginModulePeer::STATUS_ID, $statusId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(twPluginModulePeer::STATUS_ID, $statusId, $comparison);
	}

	/**
	 * Filter the query on the route column
	 * 
	 * @param     string $route The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByRoute($route = null, $comparison = null)
	{
		if (is_array($route)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $route)) {
			$route = str_replace('*', '%', $route);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(twPluginModulePeer::ROUTE, $route, $comparison);
	}

	/**
	 * Filter the query on the credentials column
	 * 
	 * @param     string $credentials The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByCredentials($credentials = null, $comparison = null)
	{
		if (is_array($credentials)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $credentials)) {
			$credentials = str_replace('*', '%', $credentials);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(twPluginModulePeer::CREDENTIALS, $credentials, $comparison);
	}

	/**
	 * Filter the query on the code column
	 * 
	 * @param     string $code The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByCode($code = null, $comparison = null)
	{
		if (is_array($code)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $code)) {
			$code = str_replace('*', '%', $code);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(twPluginModulePeer::CODE, $code, $comparison);
	}

	/**
	 * Filter the query on the pos column
	 * 
	 * @param     int|array $pos The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterByPos($pos = null, $comparison = null)
	{
		if (is_array($pos)) {
			$useMinMax = false;
			if (isset($pos['min'])) {
				$this->addUsingAlias(twPluginModulePeer::POS, $pos['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($pos['max'])) {
				$this->addUsingAlias(twPluginModulePeer::POS, $pos['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(twPluginModulePeer::POS, $pos, $comparison);
	}

	/**
	 * Filter the query by a related twPlugin object
	 *
	 * @param     twPlugin $twPlugin  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterBytwPlugin($twPlugin, $comparison = null)
	{
		return $this
			->addUsingAlias(twPluginModulePeer::PLUGIN_ID, $twPlugin->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twPlugin relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function jointwPlugin($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twPlugin');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twPlugin');
		}
		
		return $this;
	}

	/**
	 * Use the twPlugin relation twPlugin object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginQuery A secondary query class using the current class as primary query
	 */
	public function usetwPluginQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->jointwPlugin($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twPlugin', 'twPluginQuery');
	}

	/**
	 * Filter the query by a related twPluginStatus object
	 *
	 * @param     twPluginStatus $twPluginStatus  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterBytwPluginStatus($twPluginStatus, $comparison = null)
	{
		return $this
			->addUsingAlias(twPluginModulePeer::STATUS_ID, $twPluginStatus->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twPluginStatus relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function jointwPluginStatus($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twPluginStatus');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twPluginStatus');
		}
		
		return $this;
	}

	/**
	 * Use the twPluginStatus relation twPluginStatus object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginStatusQuery A secondary query class using the current class as primary query
	 */
	public function usetwPluginStatusQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->jointwPluginStatus($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twPluginStatus', 'twPluginStatusQuery');
	}

	/**
	 * Filter the query by a related twPluginModuleI18n object
	 *
	 * @param     twPluginModuleI18n $twPluginModuleI18n  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function filterBytwPluginModuleI18n($twPluginModuleI18n, $comparison = null)
	{
		return $this
			->addUsingAlias(twPluginModulePeer::ID, $twPluginModuleI18n->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twPluginModuleI18n relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function jointwPluginModuleI18n($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twPluginModuleI18n');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twPluginModuleI18n');
		}
		
		return $this;
	}

	/**
	 * Use the twPluginModuleI18n relation twPluginModuleI18n object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginModuleI18nQuery A secondary query class using the current class as primary query
	 */
	public function usetwPluginModuleI18nQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->jointwPluginModuleI18n($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twPluginModuleI18n', 'twPluginModuleI18nQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     twPluginModule $twPluginModule Object to remove from the list of results
	 *
	 * @return    twPluginModuleQuery The current query, for fluid interface
	 */
	public function prune($twPluginModule = null)
	{
		if ($twPluginModule) {
			$this->addUsingAlias(twPluginModulePeer::ID, $twPluginModule->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasetwPluginModuleQuery
