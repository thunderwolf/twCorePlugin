<?php


/**
 * Base class that represents a query for the 'tw_plugin' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.1 on:
 *
 * Fri Jun  4 01:21:49 2010
 *
 * @method     twPluginQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     twPluginQuery orderByStatusId($order = Criteria::ASC) Order by the status_id column
 * @method     twPluginQuery orderByCode($order = Criteria::ASC) Order by the code column
 * @method     twPluginQuery orderByPos($order = Criteria::ASC) Order by the pos column
 *
 * @method     twPluginQuery groupById() Group by the id column
 * @method     twPluginQuery groupByStatusId() Group by the status_id column
 * @method     twPluginQuery groupByCode() Group by the code column
 * @method     twPluginQuery groupByPos() Group by the pos column
 *
 * @method     twPluginQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     twPluginQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     twPluginQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     twPluginQuery leftJointwPluginStatus($relationAlias = '') Adds a LEFT JOIN clause to the query using the twPluginStatus relation
 * @method     twPluginQuery rightJointwPluginStatus($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twPluginStatus relation
 * @method     twPluginQuery innerJointwPluginStatus($relationAlias = '') Adds a INNER JOIN clause to the query using the twPluginStatus relation
 *
 * @method     twPluginQuery leftJointwPluginI18n($relationAlias = '') Adds a LEFT JOIN clause to the query using the twPluginI18n relation
 * @method     twPluginQuery rightJointwPluginI18n($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twPluginI18n relation
 * @method     twPluginQuery innerJointwPluginI18n($relationAlias = '') Adds a INNER JOIN clause to the query using the twPluginI18n relation
 *
 * @method     twPluginQuery leftJointwPluginModule($relationAlias = '') Adds a LEFT JOIN clause to the query using the twPluginModule relation
 * @method     twPluginQuery rightJointwPluginModule($relationAlias = '') Adds a RIGHT JOIN clause to the query using the twPluginModule relation
 * @method     twPluginQuery innerJointwPluginModule($relationAlias = '') Adds a INNER JOIN clause to the query using the twPluginModule relation
 *
 * @method     twPlugin findOne(PropelPDO $con = null) Return the first twPlugin matching the query
 * @method     twPlugin findOneById(int $id) Return the first twPlugin filtered by the id column
 * @method     twPlugin findOneByStatusId(int $status_id) Return the first twPlugin filtered by the status_id column
 * @method     twPlugin findOneByCode(string $code) Return the first twPlugin filtered by the code column
 * @method     twPlugin findOneByPos(int $pos) Return the first twPlugin filtered by the pos column
 *
 * @method     array findById(int $id) Return twPlugin objects filtered by the id column
 * @method     array findByStatusId(int $status_id) Return twPlugin objects filtered by the status_id column
 * @method     array findByCode(string $code) Return twPlugin objects filtered by the code column
 * @method     array findByPos(int $pos) Return twPlugin objects filtered by the pos column
 *
 * @package    propel.generator.plugins.twCorePlugin.lib.model.om
 */
abstract class BasetwPluginQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasetwPluginQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'twPlugin', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new twPluginQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    twPluginQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof twPluginQuery) {
			return $criteria;
		}
		$query = new twPluginQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    twPlugin|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = twPluginPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(twPluginPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(twPluginPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(twPluginPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the status_id column
	 * 
	 * @param     int|array $statusId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterByStatusId($statusId = null, $comparison = null)
	{
		if (is_array($statusId)) {
			$useMinMax = false;
			if (isset($statusId['min'])) {
				$this->addUsingAlias(twPluginPeer::STATUS_ID, $statusId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($statusId['max'])) {
				$this->addUsingAlias(twPluginPeer::STATUS_ID, $statusId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(twPluginPeer::STATUS_ID, $statusId, $comparison);
	}

	/**
	 * Filter the query on the code column
	 * 
	 * @param     string $code The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterByCode($code = null, $comparison = null)
	{
		if (is_array($code)) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		} elseif (preg_match('/[\%\*]/', $code)) {
			$code = str_replace('*', '%', $code);
			if (null === $comparison) {
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(twPluginPeer::CODE, $code, $comparison);
	}

	/**
	 * Filter the query on the pos column
	 * 
	 * @param     int|array $pos The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterByPos($pos = null, $comparison = null)
	{
		if (is_array($pos)) {
			$useMinMax = false;
			if (isset($pos['min'])) {
				$this->addUsingAlias(twPluginPeer::POS, $pos['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($pos['max'])) {
				$this->addUsingAlias(twPluginPeer::POS, $pos['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(twPluginPeer::POS, $pos, $comparison);
	}

	/**
	 * Filter the query by a related twPluginStatus object
	 *
	 * @param     twPluginStatus $twPluginStatus  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterBytwPluginStatus($twPluginStatus, $comparison = null)
	{
		return $this
			->addUsingAlias(twPluginPeer::STATUS_ID, $twPluginStatus->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twPluginStatus relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function jointwPluginStatus($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twPluginStatus');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twPluginStatus');
		}
		
		return $this;
	}

	/**
	 * Use the twPluginStatus relation twPluginStatus object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginStatusQuery A secondary query class using the current class as primary query
	 */
	public function usetwPluginStatusQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->jointwPluginStatus($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twPluginStatus', 'twPluginStatusQuery');
	}

	/**
	 * Filter the query by a related twPluginI18n object
	 *
	 * @param     twPluginI18n $twPluginI18n  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterBytwPluginI18n($twPluginI18n, $comparison = null)
	{
		return $this
			->addUsingAlias(twPluginPeer::ID, $twPluginI18n->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twPluginI18n relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function jointwPluginI18n($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twPluginI18n');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twPluginI18n');
		}
		
		return $this;
	}

	/**
	 * Use the twPluginI18n relation twPluginI18n object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginI18nQuery A secondary query class using the current class as primary query
	 */
	public function usetwPluginI18nQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->jointwPluginI18n($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twPluginI18n', 'twPluginI18nQuery');
	}

	/**
	 * Filter the query by a related twPluginModule object
	 *
	 * @param     twPluginModule $twPluginModule  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function filterBytwPluginModule($twPluginModule, $comparison = null)
	{
		return $this
			->addUsingAlias(twPluginPeer::ID, $twPluginModule->getPluginId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the twPluginModule relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function jointwPluginModule($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('twPluginModule');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'twPluginModule');
		}
		
		return $this;
	}

	/**
	 * Use the twPluginModule relation twPluginModule object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    twPluginModuleQuery A secondary query class using the current class as primary query
	 */
	public function usetwPluginModuleQuery($relationAlias = '', $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->jointwPluginModule($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'twPluginModule', 'twPluginModuleQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     twPlugin $twPlugin Object to remove from the list of results
	 *
	 * @return    twPluginQuery The current query, for fluid interface
	 */
	public function prune($twPlugin = null)
	{
		if ($twPlugin) {
			$this->addUsingAlias(twPluginPeer::ID, $twPlugin->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasetwPluginQuery
